=== Prompt for index.tsx ===

You are an expert React performance engineer. Do not add new features.
Focus only on the listed optimizations.

Apply these suggestions:
- Combine related useEffect hooks to reduce execution overhead.
- Use useMemo to memoize expensive computations and avoid recomputation on each render.

Example:
Bad:
  <button onClick={() => setCount(c => c + 1)}>Click</button>

Better:
  const handleClick = useCallback(() => setCount(c => c + 1), []);
  <button onClick={handleClick}>Click</button>

Code:
import React from 'react';
import Parent from './Parent';

const InefficientcontextTest1 = () => {
  return (
    <div style={{ display: 'flex', flexDirection: 'column' }}>
      <h2>inefficientcontextTest1</h2>
      <Parent user={{ name: 'Krishna' }} />
    </div>
  );
};

export default InefficientcontextTest1;


Return a base64 encoded zip archive containing the optimized file at the same relative path. The archive should preserve the original folder structure.
Do not include any additional explanation or commentary. Give me the downloadable zip file.

=== Prompt for Level2.tsx ===

You are an expert React performance engineer. Do not add new features.
Focus only on the listed optimizations.

Apply these suggestions:
- Combine related useEffect hooks to reduce execution overhead.
- Use useMemo to memoize expensive computations and avoid recomputation on each render.

Example:
Bad:
  <button onClick={() => setCount(c => c + 1)}>Click</button>

Better:
  const handleClick = useCallback(() => setCount(c => c + 1), []);
  <button onClick={handleClick}>Click</button>

Code:

import React, { useState, useEffect, useMemo, createContext, memo } from 'react';

import UI from '../../../components/TimePicker';

import Child from './Child';


// Context setup for inefficient-context pattern

const InefficientContext = createContext({});


// Safe guards

const Level2 = (props: any) => {
  const [count, setCount] = useState(0);
  const [data, setData] = useState<any>(null);
  
  const [showImage, setShowImage] = useState(false);
  
  

  
  useEffect(() => {
    const timer = setTimeout(() => setShowImage(true), 2000); // simulate delayed LCP
    return () => clearTimeout(timer);
  }, []);
  

  

  

  


  
  useEffect(() => {
    setTimeout(() => {
      fetch('/api/data')
        .then(res => res.json())
        .then(setData);
    }, 1500);
  }, []);
  

  
  const computed = useMemo(() => {
    return Array(10000).fill(0).map((_, i) => i * count).reduce((a, b) => a + b, 0);
  }, [count]);
  

  
  const handleClick = () => {
    const items = Array(1000000).fill(0).map((_, i) => i ** 2).reduce((a, b) => a + b, 0);
    setData({ items });
    setCount(c => c + 1);
  };
  
  

  

  
  return (
    <InefficientContext.Provider value={{ count, setCount, data }}>
      <div style={{ padding: 12 }}>
        <h3>Level2</h3>
        <UI />
        <Child /> 
      </div>
    </InefficientContext.Provider>
  );
  
};

export default memo(Level2);


Return a base64 encoded zip archive containing the optimized file at the same relative path. The archive should preserve the original folder structure.
Do not include any additional explanation or commentary. Give me the downloadable zip file.

=== Prompt for Child.tsx ===

You are an expert React performance engineer. Do not add new features.
Focus only on the listed optimizations.

Apply these suggestions:
- Combine related useEffect hooks to reduce execution overhead.
- Use useMemo to memoize expensive computations and avoid recomputation on each render.

Example:
Bad:
  <button onClick={() => setCount(c => c + 1)}>Click</button>

Better:
  const handleClick = useCallback(() => setCount(c => c + 1), []);
  <button onClick={handleClick}>Click</button>

Code:

import React, { useState, useEffect, useMemo, createContext, memo } from 'react';

import UI from '../../../components/Alert';


// Context setup for inefficient-context pattern

const InefficientContext = createContext({});


// Safe guards

const Child = (props: any) => {
  const [count, setCount] = useState(0);
  const [data, setData] = useState<any>(null);
  
  const [showImage, setShowImage] = useState(false);
  
  

  
  useEffect(() => {
    const timer = setTimeout(() => setShowImage(true), 2000); // simulate delayed LCP
    return () => clearTimeout(timer);
  }, []);
  

  

  

  


  
  useEffect(() => {
    setTimeout(() => {
      fetch('/api/data')
        .then(res => res.json())
        .then(setData);
    }, 1500);
  }, []);
  

  
  const computed = useMemo(() => {
    return Array(10000).fill(0).map((_, i) => i * count).reduce((a, b) => a + b, 0);
  }, [count]);
  

  
  const handleClick = () => {
    const items = Array(1000000).fill(0).map((_, i) => i ** 2).reduce((a, b) => a + b, 0);
    setData({ items });
    setCount(c => c + 1);
  };
  
  

  

  
  return (
    <InefficientContext.Provider value={{ count, setCount, data }}>
      <div style={{ padding: 12 }}>
        <h3>Child</h3>
        <UI />
        
      </div>
    </InefficientContext.Provider>
  );
  
};

export default memo(Child);


Return a base64 encoded zip archive containing the optimized file at the same relative path. The archive should preserve the original folder structure.
Do not include any additional explanation or commentary. Give me the downloadable zip file.

=== Prompt for Parent.tsx ===

You are an expert React performance engineer. Do not add new features.
Focus only on the listed optimizations.

Apply these suggestions:
- Combine related useEffect hooks to reduce execution overhead.
- Use useMemo to memoize expensive computations and avoid recomputation on each render.

Example:
Bad:
  <button onClick={() => setCount(c => c + 1)}>Click</button>

Better:
  const handleClick = useCallback(() => setCount(c => c + 1), []);
  <button onClick={handleClick}>Click</button>

Code:

import React, { useState, useEffect, useMemo, createContext, memo } from 'react';

import UI from '../../../components/Badge';

import Level2 from './Level2';


// Context setup for inefficient-context pattern

const InefficientContext = createContext({});


// Safe guards

const Parent = (props: any) => {
  const [count, setCount] = useState(0);
  const [data, setData] = useState<any>(null);
  
  const [showImage, setShowImage] = useState(false);
  
  

  
  useEffect(() => {
    const timer = setTimeout(() => setShowImage(true), 2000); // simulate delayed LCP
    return () => clearTimeout(timer);
  }, []);
  

  

  

  


  
  useEffect(() => {
    setTimeout(() => {
      fetch('/api/data')
        .then(res => res.json())
        .then(setData);
    }, 1500);
  }, []);
  

  
  const computed = useMemo(() => {
    return Array(10000).fill(0).map((_, i) => i * count).reduce((a, b) => a + b, 0);
  }, [count]);
  

  
  const handleClick = () => {
    const items = Array(1000000).fill(0).map((_, i) => i ** 2).reduce((a, b) => a + b, 0);
    setData({ items });
    setCount(c => c + 1);
  };
  
  

  

  
  return (
    <InefficientContext.Provider value={{ count, setCount, data }}>
      <div style={{ padding: 12 }}>
        <h3>Parent</h3>
        <UI />
        <Level2 /> 
      </div>
    </InefficientContext.Provider>
  );
  
};

export default memo(Parent);


Return a base64 encoded zip archive containing the optimized file at the same relative path. The archive should preserve the original folder structure.
Do not include any additional explanation or commentary. Give me the downloadable zip file.

