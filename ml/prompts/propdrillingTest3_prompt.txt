=== Prompt for Level4.tsx ===

You are an expert React performance engineer. Do not add new features.
Focus only on the listed optimizations.

You must apply the listed performance optimizations to each file's actual content before archiving.
Apply these suggestions:
- Combine related useEffect hooks to reduce execution overhead.
- Use useMemo to memoize expensive computations and avoid recomputation on each render.

Example:
Bad:
  <button onClick={() => setCount(c => c + 1)}>Click</button>

Better:
  const handleClick = useCallback(() => setCount(c => c + 1), []);
  <button onClick={handleClick}>Click</button>

Code:

import React, { useState, useEffect, useMemo, memo } from 'react';

import UI from '../../../components/Card';

import Child from './Child';


// Context setup for inefficient-context pattern


// Safe guards

const Level4 = (props: any) => {
  const [count, setCount] = useState(0);
  const [data, setData] = useState<any>(null);
  
  const [showImage, setShowImage] = useState(false);
  
  

  
  useEffect(() => {
    const timer = setTimeout(() => setShowImage(true), 2000); // simulate delayed LCP
    return () => clearTimeout(timer);
  }, []);
  

  

  
  useEffect(() => {
    const now = performance.now();
    while (performance.now() - now < 500) {} // simulate jank
  }, []);
  

  


  
  useEffect(() => {
    fetch('/api/data')
      .then((res) => res.json())
      .then(setData);
  }, []);
  

  
  const computed = useMemo(() => {
    return Array(10000).fill(0).map((_, i) => i * count).reduce((a, b) => a + b, 0);
  }, [count]);
  

  
  const handleClick = () => {
    const items = Array(1000000).fill(0).map((_, i) => i ** 2).reduce((a, b) => a + b, 0);
    setData({ items });
    setCount(c => c + 1);
  };
  
  

  

  
  return (
    <div style={{ padding: 12 }}>
      

      <h3>Level4</h3>
      <p>Count: {count}</p>
      <p>Data: {data ? 'Loaded' : 'Loading...'}</p>
      
        <p>Computed: {computed}</p>
      

      <UI onClick={handleClick} />

      
        <Child count={count}  />
      

      
        {Array.from({ length: 8 }).map((_, i) => (
          <div key={i} style={{ padding: 10 }}>Nested Level {i}</div>
        ))}
      

      

    
      

      
        {showImage && (
          <img
            src="/assets/hero1.jpg"
            alt="Big Banner"
            width="100%"
            height="400"
            loading="eager"
            style={{ marginTop: 24 }}
          />
        )}
      
      
    </div>
  );
  
};

export default memo(Level4);


First, apply the optimizations as listed above directly into the given code. Then, return a base64-encoded zip archive that includes these modified and optimized files, at the same relative path. Do not return placeholders or dummy files. Each file must be the result of actual transformation based on the optimization guidelines. The archive should preserve the original folder structure.
Do not include any additional explanation or commentary. Give me the downloadable zip file.
Do not use placeholder comments like /* optimized */. Each file must contain fully updated, executable React code with the optimizations applied.

=== Prompt for index.tsx ===

You are an expert React performance engineer. Do not add new features.
Focus only on the listed optimizations.

You must apply the listed performance optimizations to each file's actual content before archiving.
Apply these suggestions:
- Combine related useEffect hooks to reduce execution overhead.
- Use useMemo to memoize expensive computations and avoid recomputation on each render.

Example:
Bad:
  <button onClick={() => setCount(c => c + 1)}>Click</button>

Better:
  const handleClick = useCallback(() => setCount(c => c + 1), []);
  <button onClick={handleClick}>Click</button>

Code:
import React from 'react';
import Parent from './Parent';

const PropdrillingTest3 = () => {
  return (
    <div style={{ display: 'flex', flexDirection: 'column' }}>
      <h2>propdrillingTest3</h2>
      <Parent user={{ name: 'Krishna' }} />
    </div>
  );
};

export default PropdrillingTest3;


First, apply the optimizations as listed above directly into the given code. Then, return a base64-encoded zip archive that includes these modified and optimized files, at the same relative path. Do not return placeholders or dummy files. Each file must be the result of actual transformation based on the optimization guidelines. The archive should preserve the original folder structure.
Do not include any additional explanation or commentary. Give me the downloadable zip file.
Do not use placeholder comments like /* optimized */. Each file must contain fully updated, executable React code with the optimizations applied.

=== Prompt for Level2.tsx ===

You are an expert React performance engineer. Do not add new features.
Focus only on the listed optimizations.

You must apply the listed performance optimizations to each file's actual content before archiving.
Apply these suggestions:
- Combine related useEffect hooks to reduce execution overhead.
- Use useMemo to memoize expensive computations and avoid recomputation on each render.

Example:
Bad:
  <button onClick={() => setCount(c => c + 1)}>Click</button>

Better:
  const handleClick = useCallback(() => setCount(c => c + 1), []);
  <button onClick={handleClick}>Click</button>

Code:

import React, { useState, useEffect, useMemo, memo } from 'react';

import UI from '../../../components/Affix';

import Level3 from './Level3';


// Context setup for inefficient-context pattern


// Safe guards

const Level2 = (props: any) => {
  const [count, setCount] = useState(0);
  const [data, setData] = useState<any>(null);
  
  const [showImage, setShowImage] = useState(false);
  
  

  
  useEffect(() => {
    const timer = setTimeout(() => setShowImage(true), 2000); // simulate delayed LCP
    return () => clearTimeout(timer);
  }, []);
  

  

  
  useEffect(() => {
    const now = performance.now();
    while (performance.now() - now < 500) {} // simulate jank
  }, []);
  

  


  
  useEffect(() => {
    fetch('/api/data')
      .then((res) => res.json())
      .then(setData);
  }, []);
  

  
  const computed = useMemo(() => {
    return Array(10000).fill(0).map((_, i) => i * count).reduce((a, b) => a + b, 0);
  }, [count]);
  

  
  const handleClick = () => {
    const items = Array(1000000).fill(0).map((_, i) => i ** 2).reduce((a, b) => a + b, 0);
    setData({ items });
    setCount(c => c + 1);
  };
  
  

  

  
  return (
    <div style={{ padding: 12 }}>
      

      <h3>Level2</h3>
      <p>Count: {count}</p>
      <p>Data: {data ? 'Loaded' : 'Loading...'}</p>
      
        <p>Computed: {computed}</p>
      

      <UI onClick={handleClick} />

      
        <Level3 count={count}  />
      

      
        {Array.from({ length: 8 }).map((_, i) => (
          <div key={i} style={{ padding: 10 }}>Nested Level {i}</div>
        ))}
      

      

    
      

      
        {showImage && (
          <img
            src="/assets/hero1.jpg"
            alt="Big Banner"
            width="100%"
            height="400"
            loading="eager"
            style={{ marginTop: 24 }}
          />
        )}
      
      
    </div>
  );
  
};

export default memo(Level2);


First, apply the optimizations as listed above directly into the given code. Then, return a base64-encoded zip archive that includes these modified and optimized files, at the same relative path. Do not return placeholders or dummy files. Each file must be the result of actual transformation based on the optimization guidelines. The archive should preserve the original folder structure.
Do not include any additional explanation or commentary. Give me the downloadable zip file.
Do not use placeholder comments like /* optimized */. Each file must contain fully updated, executable React code with the optimizations applied.

=== Prompt for Level3.tsx ===

You are an expert React performance engineer. Do not add new features.
Focus only on the listed optimizations.

You must apply the listed performance optimizations to each file's actual content before archiving.
Apply these suggestions:
- Combine related useEffect hooks to reduce execution overhead.
- Use useMemo to memoize expensive computations and avoid recomputation on each render.

Example:
Bad:
  <button onClick={() => setCount(c => c + 1)}>Click</button>

Better:
  const handleClick = useCallback(() => setCount(c => c + 1), []);
  <button onClick={handleClick}>Click</button>

Code:

import React, { useState, useEffect, useMemo, memo } from 'react';

import UI from '../../../components/Image';

import Level4 from './Level4';


// Context setup for inefficient-context pattern


// Safe guards

const Level3 = (props: any) => {
  const [count, setCount] = useState(0);
  const [data, setData] = useState<any>(null);
  
  const [showImage, setShowImage] = useState(false);
  
  

  
  useEffect(() => {
    const timer = setTimeout(() => setShowImage(true), 2000); // simulate delayed LCP
    return () => clearTimeout(timer);
  }, []);
  

  

  
  useEffect(() => {
    const now = performance.now();
    while (performance.now() - now < 500) {} // simulate jank
  }, []);
  

  


  
  useEffect(() => {
    fetch('/api/data')
      .then((res) => res.json())
      .then(setData);
  }, []);
  

  
  const computed = useMemo(() => {
    return Array(10000).fill(0).map((_, i) => i * count).reduce((a, b) => a + b, 0);
  }, [count]);
  

  
  const handleClick = () => {
    const items = Array(1000000).fill(0).map((_, i) => i ** 2).reduce((a, b) => a + b, 0);
    setData({ items });
    setCount(c => c + 1);
  };
  
  

  

  
  return (
    <div style={{ padding: 12 }}>
      

      <h3>Level3</h3>
      <p>Count: {count}</p>
      <p>Data: {data ? 'Loaded' : 'Loading...'}</p>
      
        <p>Computed: {computed}</p>
      

      <UI onClick={handleClick} />

      
        <Level4 count={count}  />
      

      
        {Array.from({ length: 8 }).map((_, i) => (
          <div key={i} style={{ padding: 10 }}>Nested Level {i}</div>
        ))}
      

      

    
      

      
        {showImage && (
          <img
            src="/assets/hero1.jpg"
            alt="Big Banner"
            width="100%"
            height="400"
            loading="eager"
            style={{ marginTop: 24 }}
          />
        )}
      
      
    </div>
  );
  
};

export default memo(Level3);


First, apply the optimizations as listed above directly into the given code. Then, return a base64-encoded zip archive that includes these modified and optimized files, at the same relative path. Do not return placeholders or dummy files. Each file must be the result of actual transformation based on the optimization guidelines. The archive should preserve the original folder structure.
Do not include any additional explanation or commentary. Give me the downloadable zip file.
Do not use placeholder comments like /* optimized */. Each file must contain fully updated, executable React code with the optimizations applied.

=== Prompt for Child.tsx ===

You are an expert React performance engineer. Do not add new features.
Focus only on the listed optimizations.

You must apply the listed performance optimizations to each file's actual content before archiving.
Apply these suggestions:
- Combine related useEffect hooks to reduce execution overhead.
- Use useMemo to memoize expensive computations and avoid recomputation on each render.

Example:
Bad:
  <button onClick={() => setCount(c => c + 1)}>Click</button>

Better:
  const handleClick = useCallback(() => setCount(c => c + 1), []);
  <button onClick={handleClick}>Click</button>

Code:

import React, { useState, useEffect, useMemo, memo } from 'react';

import UI from '../../../components/TimePicker';


// Context setup for inefficient-context pattern


// Safe guards

const Child = (props: any) => {
  const [count, setCount] = useState(0);
  const [data, setData] = useState<any>(null);
  
  const [showImage, setShowImage] = useState(false);
  
  

  
  useEffect(() => {
    const timer = setTimeout(() => setShowImage(true), 2000); // simulate delayed LCP
    return () => clearTimeout(timer);
  }, []);
  

  

  
  useEffect(() => {
    const now = performance.now();
    while (performance.now() - now < 500) {} // simulate jank
  }, []);
  

  


  
  useEffect(() => {
    fetch('/api/data')
      .then((res) => res.json())
      .then(setData);
  }, []);
  

  
  const computed = useMemo(() => {
    return Array(10000).fill(0).map((_, i) => i * count).reduce((a, b) => a + b, 0);
  }, [count]);
  

  
  const handleClick = () => {
    const items = Array(1000000).fill(0).map((_, i) => i ** 2).reduce((a, b) => a + b, 0);
    setData({ items });
    setCount(c => c + 1);
  };
  
  

  

  
  return (
    <div style={{ padding: 12 }}>
      

      <h3>Child</h3>
      <p>Count: {count}</p>
      <p>Data: {data ? 'Loaded' : 'Loading...'}</p>
      
        <p>Computed: {computed}</p>
      

      <UI onClick={handleClick} />

      

      
        {Array.from({ length: 8 }).map((_, i) => (
          <div key={i} style={{ padding: 10 }}>Nested Level {i}</div>
        ))}
      

      

    
      

      
        {showImage && (
          <img
            src="/assets/hero1.jpg"
            alt="Big Banner"
            width="100%"
            height="400"
            loading="eager"
            style={{ marginTop: 24 }}
          />
        )}
      
      
    </div>
  );
  
};

export default memo(Child);


First, apply the optimizations as listed above directly into the given code. Then, return a base64-encoded zip archive that includes these modified and optimized files, at the same relative path. Do not return placeholders or dummy files. Each file must be the result of actual transformation based on the optimization guidelines. The archive should preserve the original folder structure.
Do not include any additional explanation or commentary. Give me the downloadable zip file.
Do not use placeholder comments like /* optimized */. Each file must contain fully updated, executable React code with the optimizations applied.

=== Prompt for Parent.tsx ===

You are an expert React performance engineer. Do not add new features.
Focus only on the listed optimizations.

You must apply the listed performance optimizations to each file's actual content before archiving.
Apply these suggestions:
- Combine related useEffect hooks to reduce execution overhead.
- Use useMemo to memoize expensive computations and avoid recomputation on each render.

Example:
Bad:
  <button onClick={() => setCount(c => c + 1)}>Click</button>

Better:
  const handleClick = useCallback(() => setCount(c => c + 1), []);
  <button onClick={handleClick}>Click</button>

Code:

import React, { useState, useEffect, useMemo, memo } from 'react';

import UI from '../../../components/Tabs';

import Level2 from './Level2';


// Context setup for inefficient-context pattern


// Safe guards

const Parent = (props: any) => {
  const [count, setCount] = useState(0);
  const [data, setData] = useState<any>(null);
  
  const [showImage, setShowImage] = useState(false);
  
  

  
  useEffect(() => {
    const timer = setTimeout(() => setShowImage(true), 2000); // simulate delayed LCP
    return () => clearTimeout(timer);
  }, []);
  

  

  
  useEffect(() => {
    const now = performance.now();
    while (performance.now() - now < 500) {} // simulate jank
  }, []);
  

  


  
  useEffect(() => {
    fetch('/api/data')
      .then((res) => res.json())
      .then(setData);
  }, []);
  

  
  const computed = useMemo(() => {
    return Array(10000).fill(0).map((_, i) => i * count).reduce((a, b) => a + b, 0);
  }, [count]);
  

  
  const handleClick = () => {
    const items = Array(1000000).fill(0).map((_, i) => i ** 2).reduce((a, b) => a + b, 0);
    setData({ items });
    setCount(c => c + 1);
  };
  
  

  

  
  return (
    <div style={{ padding: 12 }}>
      

      <h3>Parent</h3>
      <p>Count: {count}</p>
      <p>Data: {data ? 'Loaded' : 'Loading...'}</p>
      
        <p>Computed: {computed}</p>
      

      <UI onClick={handleClick} />

      
        <Level2 count={count}  />
      

      
        {Array.from({ length: 8 }).map((_, i) => (
          <div key={i} style={{ padding: 10 }}>Nested Level {i}</div>
        ))}
      

      

    
      

      
        {showImage && (
          <img
            src="/assets/hero1.jpg"
            alt="Big Banner"
            width="100%"
            height="400"
            loading="eager"
            style={{ marginTop: 24 }}
          />
        )}
      
      
    </div>
  );
  
};

export default memo(Parent);


First, apply the optimizations as listed above directly into the given code. Then, return a base64-encoded zip archive that includes these modified and optimized files, at the same relative path. Do not return placeholders or dummy files. Each file must be the result of actual transformation based on the optimization guidelines. The archive should preserve the original folder structure.
Do not include any additional explanation or commentary. Give me the downloadable zip file.
Do not use placeholder comments like /* optimized */. Each file must contain fully updated, executable React code with the optimizations applied.

